import base64

########################################################################################
def NormalizeURL(url):

	return url

########################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url)
	
	title = page.xpath("//meta[@property='og:title']/@content")[0]
	description = page.xpath("//meta[@property='og:description']/@content")[0]
	thumb = page.xpath("//img[contains(@style,'solid silver')]/@src")[0]	

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb
	)		

########################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, post_url=url))
			]
		)
	]

########################################################################################
def PlayVideo(url):

	view_url = ""
	video_url = ""

	page = HTML.ElementFromURL(url)
	try:
		vurl = page.xpath("//div[contains(@class,'postTabs_divs')][1]/iframe/@src")[0].split('=')[1] + "="
	except:
		vurl = page.xpath("//div[contains(@class,'postTabs_divs')]/iframe/@src")[1].split('=')[1] + "="

	return Redirect(base64.b64decode(vurl))
